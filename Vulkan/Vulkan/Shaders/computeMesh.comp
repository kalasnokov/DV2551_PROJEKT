#version 450
#extension GL_ARB_separate_shader_objects : enable
#define chunk_size 64
#define samplingPoints 32
#define realWorldDistance 10
layout(local_size_x_id = 9, local_size_y_id = samplingPoints, local_size_y_id = samplingPoints) in;
struct vertex
{
	vec3 pos;
	vec3 color;
};
layout(std430, binding = 0) buffer lay0 //Output
{ 
	vertex verticesOut[];
}; 
layout(std430, binding = 1) buffer lay1 //Input
{ 
	float heightmap[9][chunk_size][chunk_size];
};
float normalizef(float value, float min, float max)
{
	return (value - min) / (max - min);
}
void main() 
{
	float currheightmap[chunk_size][chunk_size] = heightmap[gl_WorkGroupSize.x];
	float height = normalizef(currheightmap[gl_WorkGroupSize.y][gl_WorkGroupSize.z], 0, 1);
	vertex v;
	unsigned chunkOffset = gl_WorkGroupSize.x * realworldSize;
	v.pos = vec3(chunkOffset * gl_WorkGroupSize.y * realWorldDistance, chunkOffset * gl_WorkGroupSize.z * realWorldDistance, height * realWorldDistance);
	if(height >= 0.9)
		v.color = vec3(204.0, 211.0, 224.0);
	else if(height >= 0.8)
		v.color = vec3(137.0, 147.0, 165.0);
	else if(height >= 0.7)
		v.color = vec3(96.0, 102.0, 114.0);
	else if(height >= 0.5)
		v.color = vec3(90.0, 117.0, 98.0);
	else if(height >= 0.3)
		v.color = vec3(59.0, 89.0, 68.0);
	else if(height >= 0.2)
		v.color = vec3(183.0, 147.0, 141.0);
	else
		v.color = vec3(47.0, 75.0, 145.0);
}