#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable

struct vertex {
	vec3 pos;
	vec3 color;
};

layout(std430, binding = 0) buffer lay1 { //Output 
	vertex verticesOut[];
}; 

layout(std430, binding = 1) uniform UBO {
	float seed;
	uint chunkSize;
	uint cIdx;
	uint cIdy;
} UFV;

float normalizef(float value, float min, float max){
	return (value - min) / (max - min);
}

vec3 offset[9] = vec3[9](
	vec3(-1, 0, -1),
	vec3(0, 0, -1),
	vec3(1, 0, -1),
	vec3(-1, 0, 0),
	vec3(0, 0, 0),
	vec3(1, 0, 0),
	vec3(-1, 0, 1),
	vec3(0, 0, 1),
	vec3(1, 0, 1)
);

vec3 permute(vec3 x) {
	return mod(((x * 34.0) + 1.0) * x, 289.0);
}

float simplex(vec2 v) {
  const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float rand(vec2 co) {
  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

float noise(vec2 p) {
	vec2 ip = floor(p);
	vec2 u = fract(p);
	u = u * u * (3.0 - 2.0 * u);
	
	float res = mix(
		mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x),
		mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x), u.y);
	return res * res;
}

void main() {

	uint meshPos = gl_GlobalInvocationID.x * UFV.chunkSize * UFV.chunkSize;
	uint yPos = gl_GlobalInvocationID.y * UFV.chunkSize;
	uint xPos = gl_GlobalInvocationID.z;

	float n1 = float(UFV.cIdx) + float(UFV.cIdy) + UFV.seed * float(gl_GlobalInvocationID.y + offset[gl_GlobalInvocationID.x].x * UFV.chunkSize);
	float n2 = float(UFV.cIdx) + float(UFV.cIdy) + UFV.seed * float(gl_GlobalInvocationID.z + offset[gl_GlobalInvocationID.x].z * UFV.chunkSize);

	float c1 = noise(vec2(n1, n2));
	float c2 = noise(vec2(n1, n2));
	float c3 = pow(c1 + c2, 1.5);
	float c4 = simplex(vec2(n1, n2));
	float c5 = clamp(c3 + 0.3 * c4, 0.f, 100.f);
	float c6 = pow(c5, 0.5);

	float height = c6 * 2.f;

	vertex v;

	v.pos = vec3(gl_GlobalInvocationID.y, height, gl_GlobalInvocationID.z) + (offset[gl_GlobalInvocationID.x] * UFV.chunkSize);

	if(height / 2.f >= 0.9)
		v.color = vec3(0.8, 0.8, 0.8);
	else if(height >= 0.8)
		v.color = vec3(0.55, 0.6, 0.7);
	else if(height >= 0.7)
		v.color = vec3(0.4, 0.45, 0.5);
	else if(height >= 0.5)
		v.color = vec3(0.4, 0.5, 0.45);
	else if(height >= 0.3)
		v.color = vec3(0.3, 0.4, 0.35);
	else if(height >= 0.2)
		v.color = vec3(0.7, 0.6, 0.6);
	else
		v.color = vec3(0.2, 0.3, 0.7);

	verticesOut[meshPos + yPos + xPos] = v;
}